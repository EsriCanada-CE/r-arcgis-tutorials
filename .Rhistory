library(sf)
csd_sf <- arc.data2sf(csd_df)
# Run this line to disable magic quotes in output...
options(useFancyQuotes = FALSE)
# If a copy of example.gdb exists, delete it...
if (file.exists('data/example.gdb')) {
unlink('data/example.gdb', recursive = TRUE)
}
# Create a new folder named 'example.gdb' and copy the contents of 'empty.gdb' into it:
if (!file.exists('data/example.gdb')) {
dir.create('data/example.gdb')
invisible(file.copy(paste0('data/empty.gdb/',list.files('data/empty.gdb')), 'data/example.gdb', overwrite = TRUE, recursive = FALSE, copy.mode = TRUE))
}
library(arcgisbinding)
arc.check_product()
?arc.open
csd <- arc.open("data/census/census2016.gdb/CensusSubdivisions")
csd
csd@shapeinfo
csd@extent
?arc.select
csd_df <- arc.select(csd, c("PRNAME", "CSDNAME", "CSDUID"))
csd_df <- arc.select(csd, fields = c("PRNAME", "CSDNAME", "CSDUID"))
class(csd_df)
library(dplyr)
# Load income data for dissemination areas, and join by the csd geo_code the boundary data frame:
csd_income <- arc.open('data/census/census2016.gdb/income2016csd') %>%
arc.select(c("geo_code", "gnr", "pop2016_t", "popdens_t", "income_median_t"), where_clause = "gnr is not null and gnr < 25") %>%
right_join(csd_df, by = c("geo_code" = "CSDUID"))
class(csd_income)
# Add columns back to the boundaries data frame:
csd_df$income_median_t <- csd_income$income_median_t
csd_df$pop2016_t <- csd_income$pop2016_t
csd_df$popdens_t <- csd_income$popdens_t
csd_df$gnr <- csd_income$gnr
csd_df$income_group <- ntile(csd_df$income_median_t, 5)
csd_group_ranges <- csd_df %>%
filter(!is.na(income_group)) %>%
group_by(income_group) %>%
summarize_at(
vars(pop2016_t, income_median_t),list(min = ~min(., na.rm = TRUE),max = ~max(., na.rm = TRUE))) %>%
mutate(
income_min = income_median_t_min,
income_max = income_median_t_max,
pop_min = pop2016_t_min,
pop_max = pop2016_t_max
) %>%
right_join(csd_df) %>%
join_by(income_min, income_max, pop_min, pop_max)
csd_df$income_min = csd_group_ranges$income_min
csd_df$income_max = csd_group_ranges$income_max
csd_df$pop_min = csd_group_ranges$pop_min
csd_df$pop_max = csd_group_ranges$pop_max
?arc.data2sp
library(sf)
csd_sf <- arc.data2sf(csd_df)
csd_sp <- arc.data2sp(csd_df)
library(spdplyr)
?arc.data2sp
library(sf)
csd_sf <- arc.data2sf(csd_df)
# Convert ArcGIS data to an `sf` object
csd_sf <- arc.data2sf(csd_df)
# Filter for New Brunswick CSDs
csd_nb <- csd_sf %>%
filter(grepl("New Brunswick", PRNAME))
# Plot the income_median_t column using tmap
tmap_mode("view")
install.packages('tmap')
?arc.data2sp
library(sf)
csd_sf <- arc.data2sf(csd_df)
# Convert ArcGIS data to an `sf` object
csd_sf <- arc.data2sf(csd_df)
# Filter for New Brunswick CSDs
csd_nb <- csd_sf %>%
filter(grepl("New Brunswick", PRNAME))
# Plot the income_median_t column using tmap
tmap_mode("view")
?arc.data2sp
library(sf)
library(tmap)           # Spatial visualization
csd_sf <- arc.data2sf(csd_df)
# Convert ArcGIS data to an `sf` object
csd_sf <- arc.data2sf(csd_df)
# Filter for New Brunswick CSDs
csd_nb <- csd_sf %>%
filter(grepl("New Brunswick", PRNAME))
# Plot the income_median_t column using tmap
tmap_mode("view")
tm_shape(csd_nb) +
tm_polygons("income_median_t", title = "Median Income in New Brunswick")
csd_sf
csd_nb
?arc.data2sp
library(sf)
library(tmap)           # Spatial visualization
csd_sf <- arc.data2sf(csd_df)
# Convert ArcGIS data to an `sf` object
csd_sf <- arc.data2sf(csd_df)
# Filter for New Brunswick CSDs
csd_nb <- csd_sf %>%
filter(grepl("New Brunswick", PRNAME))
library(ggplot2)
ggplot(csd_nb) +
geom_sf(aes(fill = income_median_t)) +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = "Median Income in New Brunswick",
fill = "Median Income")
# Plot the income_median_t column using tmap
tmap_mode("view")
tm_shape(csd_nb) +
tm_polygons("income_median_t", title = "Median Income in New Brunswick")
?arc.data2sp
library(sf)
library(ggplot2)
# Convert ArcGIS data to an `sf` object
csd_sf <- arc.data2sf(csd_df)
# Filter for New Brunswick CSDs
csd_nb <- csd_sf %>%
filter(grepl("New Brunswick", PRNAME))
# Show the income for CSDs in New Brunwswick::
ggplot(csd_nb) +
geom_sf(aes(fill = income_median_t)) +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = "Median Income in New Brunswick",
fill = "Median Income")
# Filter for British Columbia
csd_bc <- csd_sf %>%
filter(grepl("New Brunswick", PRNAME))
# Show the income for CSDs in British Columbia:
ggplot(csd_bc) +
geom_sf(aes(fill = income_median_t)) +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = "Median Income in New Brunswick",
fill = "Median Income")
?arc.data2sp
library(sf)
library(ggplot2)
# Convert ArcGIS data to an `sf` object
csd_sf <- arc.data2sf(csd_df)
# Filter for New Brunswick CSDs
csd_nb <- csd_sf %>%
filter(grepl("New Brunswick", PRNAME))
# Show the income for CSDs in New Brunwswick::
ggplot(csd_nb) +
geom_sf(aes(fill = income_median_t)) +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = "Median Income in New Brunswick",
fill = "Median Income")
# Filter for British Columbia
csd_bc <- csd_sf %>%
filter(grepl("New Brunswick", PRNAME))
# Show the income for CSDs in British Columbia:
ggplot(csd_bc) +
geom_sf(aes(fill = income_median_t)) +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = "Median Income in British Columbia",
fill = "Median Income")
?arc.data2sp
library(sf)
library(ggplot2)
# Convert ArcGIS data to an `sf` object
csd_sf <- arc.data2sf(csd_df)
# Filter for New Brunswick CSDs
csd_nb <- csd_sf %>%
filter(grepl("New Brunswick", PRNAME))
# Show the income for CSDs in New Brunwswick::
ggplot(csd_nb) +
geom_sf(aes(fill = income_median_t)) +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = "Median Income in New Brunswick",
fill = "Median Income")
# Filter for British Columbia
csd_bc <- csd_sf %>%
filter(grepl("British Columbi", PRNAME))
# Show the income for CSDs in British Columbia:
ggplot(csd_bc) +
geom_sf(aes(fill = income_median_t)) +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = "Median Income in British Columbia",
fill = "Median Income")
# Load Saskatchewan boundaries and income data:
sask_df <- arc.select(csd, fields = c("PRNAME", "CSDNAME", "CSDUID"), where_clause = "PRNAME like 'Sask%'")
income_df <- arc.open('data/census/census2016.gdb/income2016csd')  %>%
arc.select(c("geo_code", "gnr", "pop2016_t", "popdens_t", "income_median_t"), where_clause = "gnr is not null and gnr < 25")
# Join income data to the saskatchewan boundaries using by using an intermediate sp data frame
csd_income_sp <- left_join(arc.data2sp(sask_df), income_df, by = c("CSDUID" = "geo_code"))
# Load Saskatchewan boundaries and income data:
sask_df <- arc.select(csd, fields = c("PRNAME", "CSDNAME", "CSDUID"), where_clause = "PRNAME like 'Sask%'")
income_df <- arc.open('data/census/census2016.gdb/income2016csd')  %>%
arc.select(c("geo_code", "gnr", "pop2016_t", "popdens_t", "income_median_t"), where_clause = "gnr is not null and gnr < 25")
# Join income data to the saskatchewan boundaries using by using an intermediate sp data frame
csd_income_sp <- left_join(arc.data2sp(sask_df), income_df, by = c("CSDUID" = "geo_code"))
# Load Saskatchewan boundaries and income data:
sask_df <- arc.select(csd, fields = c("PRNAME", "CSDNAME", "CSDUID"), where_clause = "PRNAME like 'Sask%'")
income_df <- arc.open('data/census/census2016.gdb/income2016csd')  %>%
arc.select(c("geo_code", "gnr", "pop2016_t", "popdens_t", "income_median_t"), where_clause = "gnr is not null and gnr < 25")
# Join income data to the saskatchewan boundaries using by using an intermediate sp data frame
csd_income_sf <- sask_sf %>%
left_join(income_df, by = c("CSDUID" = "geo_code"))
# Load Saskatchewan boundaries and income data:
sask_df <- arc.select(csd, fields = c("PRNAME", "CSDNAME", "CSDUID"), where_clause = "PRNAME like 'Sask%'")
income_df <- arc.open('data/census/census2016.gdb/income2016csd')  %>%
arc.select(c("geo_code", "gnr", "pop2016_t", "popdens_t", "income_median_t"), where_clause = "gnr is not null and gnr < 25")
# Convert the Saskatchewan boundaries to an sf object
sask_sf <- arc.data2sf(sask_df)
# Join income data to the saskatchewan boundaries using by using an intermediate sp data frame
csd_income_sf <- sask_sf %>%
left_join(income_df, by = c("CSDUID" = "geo_code"))
class(csd_income_sp)
# Load Saskatchewan boundaries and income data:
sask_df <- arc.select(csd, fields = c("PRNAME", "CSDNAME", "CSDUID"), where_clause = "PRNAME like 'Sask%'")
income_df <- arc.open('data/census/census2016.gdb/income2016csd')  %>%
arc.select(c("geo_code", "gnr", "pop2016_t", "popdens_t", "income_median_t"), where_clause = "gnr is not null and gnr < 25")
# Convert the Saskatchewan boundaries to an sf object
sask_sf <- arc.data2sf(sask_df)
# Join income data to the saskatchewan boundaries using by using an intermediate sp data frame
csd_income_sf <- sask_sf %>%
left_join(income_df, by = c("CSDUID" = "geo_code"))
class(csd_income_sf)
# Load Saskatchewan boundaries and income data:
sask_df <- arc.select(csd, fields = c("PRNAME", "CSDNAME", "CSDUID"), where_clause = "PRNAME like 'Sask%'")
income_df <- arc.open('data/census/census2016.gdb/income2016csd')  %>%
arc.select(c("geo_code", "gnr", "pop2016_t", "popdens_t", "income_median_t"), where_clause = "gnr is not null and gnr < 25")
# Convert the Saskatchewan boundaries to an sf object
sask_sf <- arc.data2sf(sask_df)
# Join income data to the saskatchewan boundaries using by using an intermediate sp data frame
csd_income_sf <- sask_sf %>% left_join(income_df, by = c("CSDUID" = "geo_code"))
class(csd_income_sf)
# Load Saskatchewan boundaries and income data:
sask_df <- arc.select(csd, fields = c("PRNAME", "CSDNAME", "CSDUID"), where_clause = "PRNAME like 'Sask%'")
income_df <- arc.open('data/census/census2016.gdb/income2016csd')  %>%
arc.select(c("geo_code", "gnr", "pop2016_t", "popdens_t", "income_median_t"), where_clause = "gnr is not null and gnr < 25")
csd_income_sp <- left_join(arc.data2sf(sask_df), income_df, by = c("CSDUID" = "geo_code"))
# Convert the Saskatchewan boundaries to an sf object
sask_sf <- arc.data2sf(sask_df)
# Join income data to the saskatchewan boundaries using by using an intermediate sp data frame
csd_income_sf <- sask_sf %>% left_join(income_df, by = c("CSDUID" = "geo_code"))
class(csd_income_sf)
# Load Saskatchewan boundaries and income data:
sask_df <- arc.select(csd, fields = c("PRNAME", "CSDNAME", "CSDUID"), where_clause = "PRNAME like 'Sask%'")
income_df <- arc.open('data/census/census2016.gdb/income2016csd')  %>%
arc.select(c("geo_code", "gnr", "pop2016_t", "popdens_t", "income_median_t"), where_clause = "gnr is not null and gnr < 25")
csd_income_sf <- left_join(arc.data2sf(sask_df), income_df, by = c("CSDUID" = "geo_code"))
class(csd_income_sf)
# Load Saskatchewan boundaries and income data:
sask_df <- arc.select(csd, fields = c("PRNAME", "CSDNAME", "CSDUID"), where_clause = "PRNAME like 'Sask%'")
income_df <- arc.open('data/census/census2016.gdb/income2016csd')  %>%
arc.select(c("geo_code", "gnr", "pop2016_t", "popdens_t", "income_median_t"), where_clause = "gnr is not null and gnr < 25")
# Join income data to the saskatchewan boundaries using by using an intermediate sf data frame
csd_income_sf <- left_join(arc.data2sf(sask_df), income_df, by = c("CSDUID" = "geo_code"))
class(csd_income_sf)
# Load the ineq package:
library(ineq)
# Filter out N/A values for income, and limit to Ontario CSDs:
on_spdata <- csd_sp %>% filter(!is.na(income_median_t), grepl("Ontario", PRNAME))
# Load the ineq package:
library(ineq)
# Filter out N/A values for income, and limit to Ontario CSDs:
on_spdata <- csd_sf %>% filter(!is.na(income_median_t), grepl("Ontario", PRNAME))
# Calculate the lorenz curve:
?Lc
lc <- Lc(on_spdata$income_median_t)
plot(lc)
# Calculate the Gini coefficient, and add it to the plot:
?Gini
g <- Gini(on_spdata$income_median_t)
text(0.2,0.9,paste(c("Gini: ", as.character(g)), collapse=""))
library(lctools)
?spGini
?coordinates
# the spGini method relies on simple x/y coordinates:
coords = coordinates(on_spdata)
View(csd_income_sf)
library(lctools)
?spGini
# Extract coordinates from the sf object
coords <- st_coordinates(on_spdata)
# Load the ineq package:
library(ineq)
# Filter out N/A values for income, and limit to Ontario CSDs:
on_spdata <- csd_sf %>% filter(!is.na(income_median_t), grepl("Ontario", PRNAME))
# Calculate the lorenz curve:
?Lc
lc <- Lc(on_spdata$income_median_t)
plot(lc)
# Calculate the Gini coefficient, and add it to the plot:
?Gini
g <- Gini(on_spdata$income_median_t)
text(0.2,0.9,paste(c("Gini: ", as.character(g)), collapse=""))
library(lctools)
?spGini
# Extract coordinates from the sf object
coords <- st_coordinates(on_spdata)
st_geometry_type(on_spdata)
library(lctools)
?spGini
# Extract centroids for polygon geometries
coords <- st_coordinates(st_centroid(on_spdata))
# You can now use these coordinates and the income data to calculate the Gini index
spG <- spGini(coords, 15, on_spdata$income_median_t)
# Display the Gini index result
spG
?coordinates
# the spGini method relies on simple x/y coordinates:
coords = coordinates(on_spdata)
library(lctools)
?spGini
# Extract centroids for polygon geometries
coords <- st_coordinates(st_centroid(on_spdata))
# You can now use these coordinates and the income data to calculate the Gini index
spG <- spGini(coords, 15, on_spdata$income_median_t)
# Display the Gini index result
spG
?mc.spGini
# Run a monte-carlo simulation to test significance:
spG.sim20 <- mc.spGini(Nsim=19, 15, on_spdata$income_median_t, coords[,1], coords[,2])
spG.sim20$pseudo.p
?arc.write
arc.write('data/example.gdb/ontario_data', on_spdata, overwrite = TRUE)
wm_p4 <- arc.fromWktToP4(3857)
wm_p4
wm_wkt <- arc.fromP4ToWkt(wm_p4)
wm_wkt
?arc.data2sf
library(sf)
library(ggplot2)
# Convert ArcGIS data to an `sf` object
csd_sf <- arc.data2sf(csd_df)
# Filter for New Brunswick CSDs
csd_nb <- csd_sf %>%
filter(grepl("New Brunswick", PRNAME))
# Show the income for CSDs in New Brunwswick::
ggplot(csd_nb) +
geom_sf(aes(fill = income_median_t)) +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = "Median Income in New Brunswick",
fill = "Median Income")
# Filter for British Columbia
csd_bc <- csd_sf %>%
filter(grepl("British Columbi", PRNAME))
# Show the income for CSDs in British Columbia:
ggplot(csd_bc) +
geom_sf(aes(fill = income_median_t)) +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = "Median Income in British Columbia",
fill = "Median Income")
tool_exec <- function(in_params, out_params) {
arc.progress_label('Loading required R packages...')
arc.progress_pos(0)
library(dplyr)
print(paste0(
'Input parameter names: `', paste(names(in_params), collapse = '`,  `'), '`'
))
print(paste0(
'Output parameter names: `', paste(names(out_params), collapse = '`, `'), '`'
))
# Get input/output parameters
in_data <- in_params$in_data
response_var <- in_params$response_var
predictor_var <- in_params$predictor_var
predictor_groups <- in_params$predictor_groups
anova_table <- out_params$anova_table
stats_table <- out_params$stats_table
if (is.null(predictor_groups) || predictor_groups == "NA" ||
predictor_groups < 2)
{
warning("Defaulting to minimum of 2 predictor groups.")
predictor_groups <- 2
}
# Import data set to data frame
arc.progress_label('Reading data...')
arc.progress_pos(25)
data <- arc.open(in_data)
data_df <- arc.select(data, fields = c(response_var, predictor_var)) %>%
filter_at(vars(c(response_var, predictor_var)), all_vars(!is.na(.)))
# Group data into quantiles using predictor field:
grouped_df <- data_df %>%
mutate(predictor_rank = ntile(data_df[[predictor_var]], predictor_groups)) %>%
group_by(predictor_rank)
# Create box plot showing the response variable's distribution for each rank:
boxplot(grouped_df[[response_var]] ~ factor(grouped_df$predictor_rank),
ylab = response_var,
xlab = paste(c('Group (', predictor_var, ')'),collapse=''))
# Write summary statistics to table
if (!is.null(stats_table) && stats_table != 'NA') {
# Get summary stats from groups
arc.progress_label('Calculating summary statistics for each group...')
arc.progress_pos(50)
summary_funcs <- c('mean', 'sd')
summary_df <- grouped_df %>% summarize_at(
vars(response_var, predictor_var),
funs_(summary_funcs, args=list(na.rm = TRUE))
) %>% data.frame()
arc.write(stats_table, summary_df)
}
# Perform ANOVA test
arc.progress_label('Performing ANOVA...')
arc.progress_pos(75)
anova_fit <- aov(grouped_df[[response_var]] ~ factor(grouped_df$predictor_rank))
anova_results <- summary(anova_fit)
print(anova_results)
# Write ANOVA results to table
if (!is.null(anova_table) && anova_table != 'NA') {
# Change name of ranking variable label in output, and write to a data frame
rownames(anova_results[[1]])[1] = predictor_var
anova_df <- data.frame(anova_results[[1]])
arc.write(anova_table, anova_df)
}
arc.progress_label('Done')
arc.progress_pos(100)
return(out_params)
}
# Function to test in standalone R:
test_tool <- function(){
# Load the arcgisbinding package...
library(arcgisbinding)
arc.check_product()
temp <- getwd() # Substitute this with another location on disk if you like...
out_dir = file.path(temp, "data", "ANOVASamples")
if (dir.exists(out_dir))
{
unlink(out_dir, recursive=TRUE)
Sys.sleep(1)  # Wait one second, or the dir.create() method may fail...
}
dir.create(out_dir)
tool_exec(
in_params = list(
in_data = "R/tools/CSDsJoined.lyr",
response_var = "income2016csd.hh_low_income_percent_t",
predictor_var = "income2016csd.income_median_t",
predictor_groups = 5
),
out_params = list(
stats_table = file.path(out_dir, "summary_stats.csv"),
anova_table = file.path(out_dir, "anvoa_results.csv")
)
)
print(paste(c("Results saved to: ",out_dir), collapse=""))
}
# Run the test_tool() function
test_tool()
# Run the test_tool() function
test_tool()
# Run the test_tool() function
test_tool()
# Get input/output parameters
in_data <- in_params$in_data
# Run the test_tool() function
test_tool()
debugSource("D:/Resource Finder Tutorials/r-arcgis-tutorials/r-arcgis-tutorials/R/tools/test/r-arcgis-anova.R")
View(in_params)
# Write summary statistics to table
if (!is.null(stats_table) && stats_table != 'NA') {
# Get summary stats from groups
arc.progress_label('Calculating summary statistics for each group...')
arc.progress_pos(50)
summary_funcs <- c('mean', 'sd')
summary_df <- grouped_df %>% summarize_at(
vars(response_var, predictor_var),
funs_(summary_funcs, args=list(na.rm = TRUE))
) %>% data.frame()
arc.write(stats_table, summary_df)
}
debugSource("D:/Resource Finder Tutorials/r-arcgis-tutorials/r-arcgis-tutorials/R/tools/test/r-arcgis-anova.R")
debugSource("D:/Resource Finder Tutorials/r-arcgis-tutorials/r-arcgis-tutorials/R/tools/test/r-arcgis-anova.R")
View(in_params)
# Create box and whisker plot
boxplot(grouped_df[[response_var]] ~ factor(grouped_df$predictor_rank),
ylab = response_var,
xlab = paste(c('Group (', predictor_var, ')'),collapse=""))
# Write summary statistics to table
if (!is.null(stats_table) && stats_table != 'NA') {
# Get summary stats from groups
arc.progress_label('Calculating summary statistics for each group...')
arc.progress_pos(50)
summary_funcs <- c('mean', 'sd')
summary_df <- grouped_df %>%
summarize_at(vars(response_var, predictor_var), funs_(summary_funcs, args=list(na.rm = TRUE))) %>% data.frame()
arc.write(stats_table, summary_df)
}
# Perform ANOVA test
arc.progress_label('Performing ANOVA...')
arc.progress_pos(75)
anova_fit <- aov(grouped_df[[response_var]] ~ factor(grouped_df$predictor_rank))
anova_results <- summary(anova_fit)
print(anova_results)
# Write ANOVA results to table
if (!is.null(anova_table) && anova_table != 'NA') {
# Change name of grouping variable label in output, and write to data frame
rownames(anova_results[[1]])[1] = predictor_var
anova_df <- data.frame(anova_results[[1]])
arc.write(anova_table, anova_df)
}
arc.progress_label('Done')
arc.progress_pos(100)
return(out_params)
source("D:/Resource Finder Tutorials/r-arcgis-tutorials/r-arcgis-tutorials/R/tools/anova-tool.R")
debugSource("D:/Resource Finder Tutorials/r-arcgis-tutorials/r-arcgis-tutorials/R/tools/test/r-arcgis-anova.R")
debugSource("D:/Resource Finder Tutorials/r-arcgis-tutorials/r-arcgis-tutorials/R/tools/test/r-arcgis-anova.R")
debugSource("D:/Resource Finder Tutorials/r-arcgis-tutorials/r-arcgis-tutorials/R/tools/test/r-arcgis-anova.R")
debugSource("D:/Resource Finder Tutorials/r-arcgis-tutorials/r-arcgis-tutorials/R/tools/test/r-arcgis-anova.R")
